from collections.abc import Set

type Timeout = float | None


class _IsraeliQueue[GT, VT]:
    maxsize: int
    def __init__(self, maxsize: int) -> None: ...
    def qsize(self) -> int: ...
    def empty(self) -> bool: ...
    def full(self) -> bool: ...
    def groups(self) -> Set[GT]: ...
    def unfinished_tasks(self) -> int: ...


class IsraeliQueue[GT, VT](_IsraeliQueue[GT, VT]):
    def put(self, group: GT, value: VT, /,
            *, timeout: Timeout) -> None:
        ...

    def put_nowait(self, group: GT, value: VT, /) -> None: ...

    def get(self, *, timeout: Timeout) -> tuple[GT, VT]: ...
    def get_nowait(self) -> tuple[GT, VT]: ...

    def get_group(self, *, timeout: Timeout) -> tuple[GT, tuple[VT, ...]]: ...
    def get_group_nowait(self) -> tuple[GT, tuple[VT, ...]]: ...

    def task_done(self) -> None: ...
    def join(self, *, timeout: Timeout) -> None: ...

    def __repr__(self) -> str: ...


class Empty(Exception):
    ...


class Full(Exception):
    ...


class Shutdown(Exception):
    ...


class AsyncIsraeliQueue[GT, VT](_IsraeliQueue[GT, VT]):
    def __init__(self, maxsize: int) -> None: ...
    async def put(self, group: GT, value: VT, /) -> None: ...
    def put_nowait(self, group: GT, value: VT, /) -> None: ...
    async def get(self) -> tuple[GT, VT]: ...
    def get_nowait(self) -> tuple[GT, VT]: ...
    async def get_group(self) -> tuple[GT, tuple[VT, ...]]: ...
    def get_group_nowait(self) -> tuple[GT, tuple[VT, ...]]: ...
    def task_done(self) -> None: ...
    async def join(self) -> None: ...
    def __repr__(self) -> str: ...
